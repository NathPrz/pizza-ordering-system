# Configuration globale des réplicas
replicaCount:
  frontend: 2
  backend: 2
  notification: 1

# Configuration des images
image:
  registry: docker.io
  repository:
    frontend: nathprz/pizza-frontend
    backend: nathprz/pizza-service
    notification: nathprz/notification-service
    mysql: nathprz/pizza-db
  tag:
    frontend: "3.0"
    backend: "2.8"
    notification: "1.0"
    mysql: "1.1"
  pullPolicy: Always

# Configuration des services
service:
  type: ClusterIP #NodePort
  frontend:
    port: 80
    targetPort: 80
  backend:
    port: 3000
    targetPort: 3000
    selector:
      app: pizza-app-pizza-service
  notification:
    port: 80
    targetPort: 3001
  mysql:
    port: 3306
    targetPort: 3306

# Configuration de MySQL
mysql:
  rootPassword: password
  database: pizza_db
  user: pizza_user
  password: pizza
  storage: 1Gi

# Configuration d'Istio
istio:
  enabled: true
  destinationRules:
    enabled: true
    loadBalancer: "ROUND_ROBIN"
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 1024
        maxRequestsPerConnection: 10
  gateway:
    enabled: true
    hosts:
      - "pizza-app.local"
      - "pizza-app.127.0.0.1.nip.io"
    tls:
      enabled: false
      secretName: "pizza-tls-secret"
  virtualService:
    enabled: true
    corsPolicy:
      allowOrigins: ["*"]
      allowCredentials: true
      allowMethods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      allowHeaders: ["content-type", "authorization"]
      exposeHeaders: ["content-type"]
      maxAge: "24h"
    timeouts:
      orders: 10s
      notifications: 5s
    retries:
      orders: 3
    routes:
      backend:
        paths:
          - "/api/orders"
          - "/api/pizzas"
      notification:
        paths:
          - "/api/notifications"
      frontend:
        isDefault: true

# Configuration de l'Ingress (utilisé si istio.enabled = false)
ingress:
  enabled: true
  host: pizza.local